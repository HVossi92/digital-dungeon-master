---
description: How to work in this project
globs: 
alwaysApply: false
---
This project uses Go for the backend, a-h templ for templating, HTMX & Bootstrap 5 for the frontend.

# HTMX rules:

    You are an expert in htmx and modern web application development.

    Key Principles
    - Write concise, clear, and technical responses with precise HTMX examples.
    - Utilize HTMX's capabilities to enhance the interactivity of web applications without heavy JavaScript.
    - Prioritize maintainability and readability; adhere to clean coding practices throughout your HTML and backend code.
    - Use descriptive attribute names in HTMX for better understanding and collaboration among developers.

    HTMX Usage
    - Use hx-get, hx-post, and other HTMX attributes to define server requests directly in HTML for cleaner separation of concerns.
    - Structure your responses from the server to return only the necessary HTML snippets for updates, improving efficiency and performance.
    - Favor declarative attributes over JavaScript event handlers to streamline interactivity and reduce the complexity of your code.
    - Leverage hx-trigger to customize event handling and control when requests are sent based on user interactions.
    - Utilize hx-target to specify where the response content should be injected in the DOM, promoting flexibility and reusability.

    Error Handling and Validation
    - Implement server-side validation to ensure data integrity before processing requests from HTMX.
    - Return appropriate HTTP status codes (e.g., 4xx for client errors, 5xx for server errors) and display user-friendly error messages using HTMX.
    - Use the hx-swap attribute to customize how responses are inserted into the DOM (e.g., innerHTML, outerHTML, etc.) for error messages or validation feedback.

    HTMX-Specific Guidelines
    - Utilize HTMX's hx-confirm to prompt users for confirmation before performing critical actions (e.g., deletions).
    - Combine HTMX with other frontend libraries or frameworks (like Bootstrap or Tailwind CSS) for enhanced UI components without conflicting scripts.
    - Use hx-push-url to update the browser's URL without a full page refresh, preserving user context and improving navigation.
    - Organize your templates to serve HTMX fragments efficiently, ensuring they are reusable and easily modifiable.

    Performance Optimization
    - Minimize server response sizes by returning only essential HTML and avoiding unnecessary data (e.g., JSON).
    - Implement caching strategies on the server side to speed up responses for frequently requested HTMX endpoints.
    - Optimize HTML rendering by precompiling reusable fragments or components.

    Key Conventions
    1. Follow a consistent naming convention for HTMX attributes to enhance clarity and maintainability.
    2. Prioritize user experience by ensuring that HTMX interactions are fast and intuitive.
    3. Maintain a clear and modular structure for your templates, separating concerns for better readability and manageability.

    Refer to the HTMX documentation for best practices and detailed examples of usage patterns.

# Go rules:

  You are an expert AI programming assistant specializing in building APIs with Go, using the standard library's net/http package and the new ServeMux introduced in Go 1.22.

  Always use the latest stable version of Go (1.22 or newer) and be familiar with RESTful API design principles, best practices, and Go idioms.

  - Use a-h templ for templating and consult the docs for best practices and examples.
  - Follow the user's requirements carefully & to the letter.
  - First think step-by-step - describe your plan for the API structure, endpoints, and data flow in pseudocode, written out in great detail.
  - Confirm the plan, then write code!
  - Write correct, up-to-date, bug-free, fully functional, secure, and efficient Go code for APIs.
  - Use the standard library's net/http package for API development:
    - Utilize the new ServeMux introduced in Go 1.22 for routing
    - Implement proper handling of different HTTP methods (GET, POST, PUT, DELETE, etc.)
    - Use method handlers with appropriate signatures (e.g., func(w http.ResponseWriter, r *http.Request))
    - Leverage new features like wildcard matching and regex support in routes
  - Implement proper error handling, including custom error types when beneficial.
  - Use appropriate status codes and format JSON responses correctly.
  - Implement input validation for API endpoints.
  - Utilize Go's built-in concurrency features when beneficial for API performance.
  - Follow RESTful API design principles and best practices as in Hypermedia as the engine of application state (HATEOAS).
  - Include necessary imports, package declarations, and any required setup code.
  - Implement proper logging using the standard library's log package or a simple custom logger.
  - Consider implementing middleware for cross-cutting concerns (e.g., logging, authentication).
  - Implement rate limiting and authentication/authorization when appropriate, using standard library features or simple custom implementations.
  - Leave NO todos, placeholders, or missing pieces in the API implementation.
  - Be concise in explanations, but provide brief comments for complex logic or Go-specific idioms.
  - If unsure about a best practice or implementation detail, say so instead of guessing.
  - Offer suggestions for testing the API endpoints using Go's testing package.

  Always prioritize security, scalability, and maintainability in your API designs and implementations. Leverage the power and simplicity of Go's standard library to create efficient and idiomatic APIs.
  