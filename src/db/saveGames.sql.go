// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: saveGames.sql

package db

import (
	"context"
)

const deleteSaveGame = `-- name: DeleteSaveGame :exec
DELETE FROM save_games WHERE id = ?
`

func (q *Queries) DeleteSaveGame(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteSaveGame, id)
	return err
}

const getChatMessages = `-- name: GetChatMessages :many
SELECT id, role, content, save_game_id, created FROM chat_messages WHERE save_game_id = ?
`

func (q *Queries) GetChatMessages(ctx context.Context, saveGameID int64) ([]ChatMessage, error) {
	rows, err := q.db.QueryContext(ctx, getChatMessages, saveGameID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ChatMessage
	for rows.Next() {
		var i ChatMessage
		if err := rows.Scan(
			&i.ID,
			&i.Role,
			&i.Content,
			&i.SaveGameID,
			&i.Created,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSaveGame = `-- name: GetSaveGame :one
SELECT id, name, created FROM save_games WHERE id = ?
`

func (q *Queries) GetSaveGame(ctx context.Context, id int64) (SaveGame, error) {
	row := q.db.QueryRowContext(ctx, getSaveGame, id)
	var i SaveGame
	err := row.Scan(&i.ID, &i.Name, &i.Created)
	return i, err
}

const getSaveGames = `-- name: GetSaveGames :many
SELECT id, name, created FROM save_games
`

func (q *Queries) GetSaveGames(ctx context.Context) ([]SaveGame, error) {
	rows, err := q.db.QueryContext(ctx, getSaveGames)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SaveGame
	for rows.Next() {
		var i SaveGame
		if err := rows.Scan(&i.ID, &i.Name, &i.Created); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertChatMessage = `-- name: InsertChatMessage :exec
INSERT INTO chat_messages (role, content, save_game_id) VALUES (?, ?, ?)
`

type InsertChatMessageParams struct {
	Role       string
	Content    string
	SaveGameID int64
}

func (q *Queries) InsertChatMessage(ctx context.Context, arg InsertChatMessageParams) error {
	_, err := q.db.ExecContext(ctx, insertChatMessage, arg.Role, arg.Content, arg.SaveGameID)
	return err
}

const insertSaveGame = `-- name: InsertSaveGame :exec
INSERT INTO save_games (name) VALUES (?)
`

func (q *Queries) InsertSaveGame(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, insertSaveGame, name)
	return err
}
